name: Build and Push Docker Image to GHCR and Docker Hub

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Grant necessary permissions for GHCR package management
permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate version tags
        id: version
        run: |
          DATE_TAG=$(date +'%Y-%m-%d')
          echo "date_tag=$DATE_TAG" >> $GITHUB_OUTPUT
          
          echo "Tags: latest, $DATE_TAG"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image to both registries
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/shopping2go/gh-self-hosted-runner:latest
            ghcr.io/shopping2go/gh-self-hosted-runner:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/gh-self-hosted-runner:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/gh-self-hosted-runner:${{ steps.version.outputs.date_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Update Docker Hub description
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          echo "üìù Updating Docker Hub README..."
          
          # Get JWT token from Docker Hub
          HUB_TOKEN=$(curl -s -H "Content-Type: application/json" \
            -X POST \
            -d "{\"username\":\"${DOCKERHUB_USERNAME}\",\"password\":\"${DOCKERHUB_TOKEN}\"}" \
            https://hub.docker.com/v2/users/login/ | jq -r .token)
          
          if [ -z "$HUB_TOKEN" ] || [ "$HUB_TOKEN" = "null" ]; then
            echo "‚ùå Failed to acquire Docker Hub token"
            echo "‚ÑπÔ∏è  Please check your DOCKERHUB_TOKEN secret"
            exit 0
          fi
          
          echo "‚úÖ Token acquired successfully"
          
          # Read and escape README content for JSON
          README_CONTENT=$(jq -Rs . < README.md)
          
          # Update repository description
          RESPONSE=$(curl -s -w "\n%{http_code}" \
            -X PATCH \
            -H "Authorization: JWT ${HUB_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "{\"full_description\":${README_CONTENT}}" \
            "https://hub.docker.com/v2/repositories/${DOCKERHUB_USERNAME}/gh-self-hosted-runner/")
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Docker Hub README updated successfully"
          elif [ "$HTTP_CODE" = "403" ]; then
            echo "‚ö†Ô∏è  Update returned HTTP 403 (Forbidden)"
            echo "‚ÑπÔ∏è  Your Docker Hub token doesn't have permission to update repository descriptions."
            echo "‚ÑπÔ∏è  To fix this, you need to:"
            echo "    1. Go to https://hub.docker.com/settings/security"
            echo "    2. Create a new Access Token with 'Read, Write, Delete' permissions"
            echo "    3. Update the DOCKERHUB_TOKEN secret in GitHub with the new token"
            echo "    OR use your Docker Hub account password instead of an access token"
            echo ""
            echo "‚ÑπÔ∏è  For now, you can manually update the description at:"
            echo "    https://hub.docker.com/repository/docker/${DOCKERHUB_USERNAME}/gh-self-hosted-runner/general"
          else
            echo "‚ö†Ô∏è  Update returned HTTP $HTTP_CODE"
            echo "$BODY"
          fi
        continue-on-error: true

      - name: Display published tags
        run: |
          echo "‚úÖ Published to GHCR: latest, ${{ github.sha }}"
          echo "‚úÖ Published to Docker Hub: latest, ${{ steps.version.outputs.date_tag }}"
          echo "‚úÖ Docker Hub README updated"

      - name: Make GHCR image public
        env:
          GH_TOKEN: ${{ secrets.GHCR_PAT || secrets.GITHUB_TOKEN }}
        run: |
          PACKAGE_NAME="gh-self-hosted-runner"
          OWNER="shopping2go"
          
          if [ -z "${{ secrets.GHCR_PAT }}" ]; then
            echo "‚ö†Ô∏è  No GHCR_PAT - using GITHUB_TOKEN (limited permissions)"
          fi
          
          sleep 10
          
          # Try to set visibility
          if gh api --method PATCH \
            -H "Accept: application/vnd.github+json" \
            "/orgs/$OWNER/packages/container/$PACKAGE_NAME" \
            -f visibility='public' 2>/dev/null || \
             gh api --method PATCH \
            -H "Accept: application/vnd.github+json" \
            "/users/$OWNER/packages/container/$PACKAGE_NAME" \
            -f visibility='public' 2>/dev/null; then
            echo "‚úÖ Visibility set to public"
          fi
          
          sleep 3
          
          # Verify visibility
          CURRENT_VISIBILITY="unknown"
          if RESPONSE=$(gh api "/orgs/$OWNER/packages/container/$PACKAGE_NAME" 2>/dev/null); then
            CURRENT_VISIBILITY=$(echo "$RESPONSE" | jq -r '.visibility // "unknown"')
          elif RESPONSE=$(gh api "/users/$OWNER/packages/container/$PACKAGE_NAME" 2>/dev/null); then
            CURRENT_VISIBILITY=$(echo "$RESPONSE" | jq -r '.visibility // "unknown"')
          fi
          
          if [ "$CURRENT_VISIBILITY" = "public" ]; then
            echo "‚úÖ Package is PUBLIC"
          else
            echo "‚ùå Package is PRIVATE - manual change required:"
            echo "   https://github.com/orgs/$OWNER/packages/container/$PACKAGE_NAME/settings"
          fi
